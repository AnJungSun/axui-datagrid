import * as React from 'react';
import { types, DispatchTypes } from '../stores';
export interface IDataGridStore extends types.DataGridState {
    setStoreState: (store: types.DataGridState) => void;
    dispatch: (dispatchType: DispatchTypes, param: types.DataGridDispatchParam) => void;
}
declare class StoreProvider extends React.Component<any, types.DataGridState> {
    state: IDataGridStore;
    throttledUpdateDimensions: any;
    static getDerivedStateFromProps(newProps: any, prevState: types.DataGridState): {
        scrollTop: number | undefined;
        mounted: any;
        loading: any;
        loadingData: any;
        setRootState: any;
        getRootState: any;
        getRootNode: any;
        getClipBoardNode: any;
        rootObject: any;
        data: any;
        filteredList: any[];
        options: any;
        height: any;
        onBeforeEvent: any;
        onAfterEvent: any;
        onScrollEnd: any;
        onChangeSelected: any;
        colGroupMap: any;
        asideColGroup: any;
        colGroup: any;
        headerTable: any;
        asideHeaderData: any;
        leftHeaderData: any;
        headerData: any;
        leftHeaderColGroup: any;
        headerColGroup: any;
        bodyRowTable: any;
        bodyRowMap: any;
        asideBodyRowData: any;
        leftBodyRowData: any;
        bodyRowData: any;
        footSumColumns: any;
        footSumTable: any;
        leftFootSumData: any;
        footSumData: any;
        styles: types.DataGridStyles;
        printStartColIndex: any;
        printEndColIndex: any;
        visibleHeaderColGroup: any;
        visibleBodyRowData: any;
        visibleBodyGroupingData: any;
        visibleFootSumData: any;
        calculatedStyles?: boolean | undefined;
        listSelectedAll?: boolean | undefined;
        selectedRowIndex?: number | undefined;
        selectedRowIndexSelected?: boolean | undefined;
        sortInfo?: {} | undefined;
        filterInfo?: {} | undefined;
        isInlineEditing?: boolean | undefined;
        inlineEditingCell?: import("axui-datagrid/stores/@interfaces").IDataGridEditingCell | undefined;
        columnResizing?: boolean | undefined;
        columnResizerLeft?: number | undefined;
        isColumnFilter?: number | boolean | undefined;
        scrollLeft?: number | undefined;
        endOfScrollTop?: boolean | undefined;
        endOfScrollLeft?: boolean | undefined;
        selectionRows?: {} | undefined;
        selectionCols?: {} | undefined;
        focusedRow?: number | undefined;
        focusedCol?: number | undefined;
        selectionStartOffset?: import("axui-datagrid/stores/@interfaces").IPosition | undefined;
        selectionEndOffset?: import("axui-datagrid/stores/@interfaces").IPosition | undefined;
        selectionMinOffset?: import("axui-datagrid/stores/@interfaces").IPosition | undefined;
        selectionMaxOffset?: import("axui-datagrid/stores/@interfaces").IPosition | undefined;
        bodyGrouping?: import("axui-datagrid/stores/@interfaces").IDataGridCol[] | undefined;
        bodyGroupingTable?: types.DataGridColumnTableMap | undefined;
        asideBodyGroupingData?: types.DataGridColumnTableMap | undefined;
        leftBodyGroupingData?: types.DataGridColumnTableMap | undefined;
        bodyGroupingData?: types.DataGridColumnTableMap | undefined;
        bodyGroupingMap?: {} | undefined;
        propColumns?: string | undefined;
        propOptions?: string | undefined;
        predefinedFormatter?: import("axui-datagrid/stores/@interfaces").IDataGridFormatter | undefined;
        predefinedCollector?: import("axui-datagrid/stores/@interfaces").IDataGridCollector | undefined;
    } | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    updateDimensions(): void;
    setStoreState: (newState: types.DataGridState) => void;
    dispatch: (dispatchType: DispatchTypes, param: types.DataGridDispatchParam) => void;
    render(): JSX.Element;
}
declare const _default: {
    Provider: typeof StoreProvider;
    Consumer: React.ComponentType<React.ConsumerProps<IDataGridStore>>;
};
export default _default;
